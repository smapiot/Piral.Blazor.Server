import{_ as i,c as e,a0 as a,o as t}from"./chunks/framework.B-P3EkDQ.js";const E=JSON.parse('{"title":"Build Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started/spa/configuration.md","filePath":"getting-started/spa/configuration.md","lastUpdated":1733327392000}'),n={name:"getting-started/spa/configuration.md"};function l(h,s,p,o,r,k){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="build-configuration" tabindex="-1">Build Configuration <a class="header-anchor" href="#build-configuration" aria-label="Permalink to &quot;Build Configuration&quot;">​</a></h1><p>The main build configuration is done via the project file. Additionally, some special files are considered, too.</p><nav class="table-of-contents"><ul><li><a href="#project-file">Project File</a></li><li><a href="#special-files">Special Files</a><ul><li><a href="#extending-the-pilet-s-setup">Extending the Pilet&#39;s Setup</a></li><li><a href="#overwriting-the-package-manifest">Overwriting the Package Manifest</a></li><li><a href="#overwriting-the-debug-meta-data">Overwriting the Debug Meta Data</a></li><li><a href="#extending-the-pilet-s-teardown">Extending the Pilet&#39;s Teardown</a></li><li><a href="#defining-additional-javascript-imports">Defining Additional JavaScript Imports</a></li><li><a href="#devserver-settings">DevServer Settings</a></li><li><a href="#setting-the-logging-level">Setting the Logging Level</a></li></ul></li></ul></nav><h2 id="project-file" tabindex="-1">Project File <a class="header-anchor" href="#project-file" aria-label="Permalink to &quot;Project File&quot;">​</a></h2><p>The <code>*.csproj</code> file of your pilet offers you some configuration steps to actually tailor the build to your needs.</p><p>Here is a minimal example configuration:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Project</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Microsoft.NET.Sdk.BlazorWebAssembly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TargetFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;net8.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TargetFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;../../app-shell/dist/emulator/app-shell-1.0.0.tgz&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>This one gets the app shell from a local directory. Realistically, you&#39;d have your app shell on a registry. In case of the default registry it could look like</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Project</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Microsoft.NET.Sdk.BlazorWebAssembly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TargetFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;net8.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TargetFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;@mycompany/app-shell&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>but realistically you&#39;d publish the app shell to a private registry on a different URL. In such scenarios you&#39;d also make use of the <code>NpmRegistry</code> setting:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Project</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Microsoft.NET.Sdk.BlazorWebAssembly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TargetFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;net8.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TargetFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;@mycompany/app-shell&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">NpmRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;https://registry.mycompany.com/&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">NpmRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>Besides these two options (required <code>PiralInstance</code> and optional <code>NpmRegistry</code>) the following settings exist:</p><ul><li><code>Version</code>: Sets the version of the pilet. This is a/the standard project property.</li><li><code>PiralInstance</code>: Sets the name (or local path) of the app shell.</li><li><code>NpmRegistry</code>: Sets the URL of the npm registry to use. Will be used for getting npm dependencies of the app shell (and the app shell itself).</li><li><code>Bundler</code>: Sets the name of the bundler to use. By default this is <code>esbuild</code>. The list of all available bundlers can be found <a href="https://docs.piral.io/reference/documentation/bundlers" target="_blank" rel="noreferrer">in the Piral documentation</a>.</li><li><code>ProjectsWithStaticFiles</code>: Sets the names of the projects that contain static files, which require to be copied to the output directory. Separate the names of these projects by semicolons.</li><li><code>Monorepo</code>: Sets the behavior of the scaffolding to a monorepo mode. The value must be <code>enable</code> to switch this on.</li><li><code>PiralCliVersion</code>: Determines the version of the <code>piral-cli</code> tooling to use. By default this is <code>latest</code>.</li><li><code>PiralBundlerVersion</code>: Determines the version of the <code>piral-cli-&lt;bundler&gt;</code> to use. By default, this is the same as the value of the <code>PiralCliVersion</code>.</li><li><code>OutputFolder</code>: Sets the temporary output folder for the generated pilet (default: <code>..\\piral~</code>).</li><li><code>ConfigFolder</code>: Sets the folder where the config files are stored (default: <em>empty</em>, i.e., current project folder).</li><li><code>MocksFolder</code>: Sets the folder where the Kras mock files are stored (default: <code>.\\mocks</code>).</li><li><code>PiletKind</code>: Sets the pilet kind (values: <code>global</code>, <code>local</code>; default: <code>local</code>).</li><li><code>PiletPriority</code>: Sets the optional priority of the pilet when loading (any representable positive number). DLLs of Blazor pilets with higher numbers will <em>always</em> be loaded before the current DLLs (default: <em>none</em>).</li><li><code>PublishFeedUrl</code>: Sets the URL to be used for publishing the pilet. If this is left free then using &quot;Publish&quot; in Visual Studio will not trigger a publish of the pilet.</li><li><code>PublishFeedApiKey</code>: Sets the API Key to be used when publishing the pilet. If this is left free then the interactive upload is used, which will open a web browser for logging into the feed service.</li></ul><p>A more extensive example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Project</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Microsoft.NET.Sdk.BlazorWebAssembly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TargetFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;net7.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TargetFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1.2.3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;@mycompany/app-shell&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralCliVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;next&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralCliVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralBundlerVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1.1.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiralBundlerVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">NpmRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;https://registry.mycompany.com/&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">NpmRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Bundler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;esbuild&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Bundler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Monorepo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;disable&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Monorepo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ProjectsWithStaticFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      designsystem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      someotherproject;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      thirdproj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ProjectsWithStaticFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiletPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;999&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PiletPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>While pilets that define <code>PiletKind</code> to be <code>global</code> only have <em>shared dependencies</em>, the default for <code>local</code> pilets is to have <em>integrated dependencies</em>. If certain dependencies of <code>local</code> pilets should also be loaded into the global context (effectively sharing the dependency between all pilets - independent of the version) then you need to put those dependencies into a dedicated <code>ItemGroup</code> using the <code>Label</code> <code>shared</code>:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Project</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Microsoft.NET.Sdk.BlazorWebAssembly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- ... --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ItemGroup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PackageReference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Autofac.Extensions.DependencyInjection&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ItemGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ItemGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PackageReference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Microsoft.AspNetCore.Components.WebAssembly&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PackageReference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Microsoft.AspNetCore.Components.WebAssembly.DevServer&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8.0.1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PrivateAssets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ItemGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="special-files" tabindex="-1">Special Files <a class="header-anchor" href="#special-files" aria-label="Permalink to &quot;Special Files&quot;">​</a></h2><p>There are some special files that you can add in your project (adjacent to the <em>.csproj</em> file):</p><ul><li><em>setup.tsx</em></li><li><em>teardown.tsx</em></li><li><em>package-overwrites.json</em></li><li><em>meta-overwrites.json</em></li><li><em>kras-overwrites.json</em></li><li><em>js-imports.json</em></li></ul><p><strong>Note</strong>: The location of these files can also be changed through the <code>ConfigFolder</code> option. By default, this one is empty, i.e., all files have to be placed adjacent to the <em>.csproj</em> file as mentioned above. However, if you set the value to, e.g., <em>.piletconfig</em> then the files will be retrieved from this subdirectory. For instance, the setup file would then be read from <em>.piletconfig/setup.tsx</em>.</p><p>Let&#39;s see what these files do and how they can be used.</p><h3 id="extending-the-pilet-s-setup" tabindex="-1">Extending the Pilet&#39;s Setup <a class="header-anchor" href="#extending-the-pilet-s-setup" aria-label="Permalink to &quot;Extending the Pilet&#39;s Setup&quot;">​</a></h3><p>The <em>setup.tsx</em> file can be used to define more things that should be done in a pilet&#39;s <code>setup</code> function. By default, the content of the <code>setup</code> function is auto generated. Things such as <code>@page /path-to-use</code> components or components with <code>@attribute [PiralExtension(&quot;name-of-slot&quot;)]</code> would be automatically registered. However, already in case of <code>@attribute [PiralComponent]</code> we have a problem. What should this component do? Where is it used?</p><p>The solution is to use the <em>setup.tsx</em> file. An example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerMenu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromBlazor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;counter-menu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ListToggle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromBlazor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;counter-preview&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>This example registers a pilet&#39;s component named &quot;counter-menu&quot; as a menu entry. Furthermore, it also adds the &quot;counter-preview&quot; component as an extension to the &quot;ListToggle&quot; slot.</p><p>Anything that is available on the Pilet API provided via the <code>app</code> argument is available in the function. The only import part of <em>setup.tsx</em> is that has a default export - which is actually a function.</p><h3 id="overwriting-the-package-manifest" tabindex="-1">Overwriting the Package Manifest <a class="header-anchor" href="#overwriting-the-package-manifest" aria-label="Permalink to &quot;Overwriting the Package Manifest&quot;">​</a></h3><p>The generated / used pilet is a standard npm package. Therefore, it will have a <em>package.json</em>. The content of this <em>package.json</em> is mostly pre-determined. Things such as <code>piral-cli</code> or the pilet&#39;s app shell package are in there. In some cases, additional JS dependencies for runtime or development aspects are necessary or useful. In such cases the <em>package-overwrites.json</em> comes in handy.</p><p>For instance, to actually extend the <code>devDependencies</code> you could write:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;axios&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^0.20.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This would add a development dependency to the <code>axios</code> package. Likewise, other details, such as a publish config or a description could also be added / overwritten:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is my pilet description.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;publishConfig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;access&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;public&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The rules for the merge follow the <a href="https://www.newtonsoft.com/json/help/html/MergeJson.htm" target="_blank" rel="noreferrer">Json.NET</a> approach.</p><h3 id="overwriting-the-debug-meta-data" tabindex="-1">Overwriting the Debug Meta Data <a class="header-anchor" href="#overwriting-the-debug-meta-data" aria-label="Permalink to &quot;Overwriting the Debug Meta Data&quot;">​</a></h3><p>The generated / used pilet is served from the local file system instead of a feed service. Therefore, it will not have things like a configuration store. However, you might want to use one - or at least test against one. For this, usually a <em>meta.json</em> file can be used. The content of this <em>meta.json</em> is then merged into the metadata of a served pilet. For Piral.Blazor this file is premade, however, its content can still be overwritten using a <em>meta-overwrites.json</em> file.</p><p>For instance, to include a custom <code>config</code> field (with one config called <code>backendUrl</code>) in the pilet&#39;s metadata you can use the following content:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;backendUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:7345&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The rules for the merge follow the <a href="https://www.newtonsoft.com/json/help/html/MergeJson.htm" target="_blank" rel="noreferrer">Json.NET</a> approach.</p><h3 id="extending-the-pilet-s-teardown" tabindex="-1">Extending the Pilet&#39;s Teardown <a class="header-anchor" href="#extending-the-pilet-s-teardown" aria-label="Permalink to &quot;Extending the Pilet&#39;s Teardown&quot;">​</a></h3><p>The <em>teardown.tsx</em> file can be used to define more things that should be done in a pilet&#39;s <code>teardown</code> function. By default, the content of the <code>teardown</code> function is auto generated. Things such as <code>pages</code> and <code>extensions</code> would be automatically unregistered. However, in some cases you will need to unregister things manually. You can do this here.</p><h3 id="defining-additional-javascript-imports" tabindex="-1">Defining Additional JavaScript Imports <a class="header-anchor" href="#defining-additional-javascript-imports" aria-label="Permalink to &quot;Defining Additional JavaScript Imports&quot;">​</a></h3><p>Some Blazor dependencies require additional JavaScript packages in order to work correctly. The <em>js-imports.json</em> file can be to declare all these. The files will then be added via a generated <code>import</code> statement in the pilet&#39;s root module.</p><p>The content of the <em>js-imports.json</em> file is a JSON array. For example:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;axios&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;global-date-functions&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Includes the two dependencies via the respective <code>import</code> statements.</p><h3 id="devserver-settings" tabindex="-1">DevServer Settings <a class="header-anchor" href="#devserver-settings" aria-label="Permalink to &quot;DevServer Settings&quot;">​</a></h3><p>The <code>Piral.Blazor.DevServer</code> can be configured, too. Much like the standard / official Blazor DevServer you can introduce a <em>blazor-devserversettings.json</em> file that describes more options. Most of the contained options are the same as the one for the official Blazor DevServer.</p><p>Current options found in the <code>Piral</code> section:</p><ul><li><p><code>forwardedPaths</code> - is an array of strings describing the path segments that should be forwarded to the Piral CLI dev server (using kras)</p><p>Example:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Piral&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;forwardedPaths&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>feedUrl</code> - is a string defining an URL for including an external / remote feed of pilets into the debug process</p><p>Example:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Piral&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;feedUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://feed.piral.cloud/api/v1/pilet/sample&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>In addition, the options for the DevServer also touch the configured options for the <code>Piral.Blazor.Tools</code>, such as <code>OutputFolder</code> which is used to define where the scaffolded pilet is stored.</p><h3 id="setting-the-logging-level" tabindex="-1">Setting the Logging Level <a class="header-anchor" href="#setting-the-logging-level" aria-label="Permalink to &quot;Setting the Logging Level&quot;">​</a></h3><p>The log level can be set either within your Blazor pilets using the <code>ILoggingConfiguration</code> service or from JavaScript:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DotNet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeMethodAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Piral.Blazor.Core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SetLogLevel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, logLevel);</span></span></code></pre></div><p>Here, the value for <code>logLevel</code> should be between 0-6, where 0 logs everything (even traces) and 6 logs nothing. Alternatively, you can also set a log level when initializing <code>piral-blazor</code>.</p>`,56)]))}const g=i(n,[["render",l]]);export{E as __pageData,g as default};
