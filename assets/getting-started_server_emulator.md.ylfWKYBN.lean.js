import{_ as t,c as i,o as a,a0 as s}from"./chunks/framework.BJMahNig.js";const p=JSON.parse('{"title":"Publishing the Emulator","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started/server/emulator.md","filePath":"getting-started/server/emulator.md","lastUpdated":1742511423000}'),o={name:"getting-started/server/emulator.md"};function l(n,e,r,h,u,c){return a(),i("div",null,e[0]||(e[0]=[s('<h1 id="publishing-the-emulator" tabindex="-1">Publishing the Emulator <a class="header-anchor" href="#publishing-the-emulator" aria-label="Permalink to &quot;Publishing the Emulator&quot;">​</a></h1><p>For developing a micro frontend you&#39;ll need an emulator. An emulator is just a NuGet package containing a special build of the app shell that you&#39;ve build for running your micro frontends.</p><nav class="table-of-contents"><ul><li><a href="#publishing-using-the-piral-server-server-cli">Publishing using the piral-server-server CLI</a></li><li><a href="#publishing-using-the-dotnet-cli">Publishing using the dotnet CLI</a></li></ul></nav><h2 id="publishing-using-the-piral-server-server-cli" tabindex="-1">Publishing using the <code>piral-server-server</code> CLI <a class="header-anchor" href="#publishing-using-the-piral-server-server-cli" aria-label="Permalink to &quot;Publishing using the `piral-server-server` CLI&quot;">​</a></h2><p>The command <code>piral-blazor-server create-emulator</code> can be used to create an emulator NuGet package for the current Piral.Blazor server, i.e., the app shell that should be used.</p><p>Example:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">piral-blazor-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-emulator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist</span></span></code></pre></div><p>This command creates an emulator NuGet package in the <code>dist</code> directory. The <code>csproj</code> file for the example above is assumed to be in the working directory. The NuGet package can then be published using <code>nuget push</code> or <code>dotnet nuget push</code>.</p><h2 id="publishing-using-the-dotnet-cli" tabindex="-1">Publishing using the <code>dotnet</code> CLI <a class="header-anchor" href="#publishing-using-the-dotnet-cli" aria-label="Permalink to &quot;Publishing using the `dotnet` CLI&quot;">​</a></h2><p>If you want to have full control then using a custom sequence for creating and publishing the emulator might be what you are looking for. For this you&#39;ll need the <code>dotnet</code> and the <code>nuget</code> CLI. You will also need to create a custom <code>*.nuspec</code> file.</p><p>We start the sequence by producing a release build of your application:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Release</span></span></code></pre></div><p>This will create the emulator&#39;s files in the publish directory (<code>bin/Release/net8.0/publish</code>).</p><p>Now create a NuGet config <em>inside</em> the <code>bin/Release/net8.0/publish</code> directory using the following properties:</p><ul><li>Name of your app shell (or how you want to call the emulator package)</li><li>Version of your app shell</li><li>Proper description, author etc. fields</li></ul><p>The <code>files</code> should be set to <code>**/*</code>, i.e., take all files of the publish directory and place it in the NuGet package.</p><p>You need the <code>nuget</code> command line tooling to run <code>nuget pack</code> without any compilation. If you only have <code>dotnet</code> then this won&#39;t work (as <code>dotnet</code> will only run against a csproj, which the publish folder does not have).</p><p>Once the <code>*.nupkg</code> file is ready you can publish it to the NuGet feed or your choice.</p>',18)]))}const g=t(o,[["render",l]]);export{p as __pageData,g as default};
