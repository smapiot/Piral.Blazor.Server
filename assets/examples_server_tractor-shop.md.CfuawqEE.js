import{_ as r,c as a,o as t,a0 as o}from"./chunks/framework.BJMahNig.js";const d=JSON.parse('{"title":"Server Example: Tractor Shop","description":"","frontmatter":{},"headers":[],"relativePath":"examples/server/tractor-shop.md","filePath":"examples/server/tractor-shop.md","lastUpdated":1741965792000}'),l={name:"examples/server/tractor-shop.md"};function p(s,e,i,n,c,h){return t(),a("div",null,e[0]||(e[0]=[o('<h1 id="server-example-tractor-shop" tabindex="-1">Server Example: Tractor Shop <a class="header-anchor" href="#server-example-tractor-shop" aria-label="Permalink to &quot;Server Example: Tractor Shop&quot;">â€‹</a></h1><p>This example reconstructs the famous <a href="https://micro-frontends.org" target="_blank" rel="noreferrer">Tractor Store v1</a> example from Michael Geers. It separates each micro frontend in its own project - making them truly independent and deployable as individual pieces.</p><p>Besides the implementation of the Tractor Store the example also shows how debugging of individual pieces can work in a joint setup. For this a few extras have been included.</p><p>The example includes:</p><ul><li>App Shell project</li><li>Three micro frontend projects (red, blue, green)</li><li>One empty micro frontend project showing how joint debugging / development works</li></ul><p>The code for this example is available at <a href="https://github.com/FlorianRappl/Piral.Blazor.Server.Samples.Tractor" target="_blank" rel="noreferrer">github.com/FlorianRappl/Piral.Blazor.Server.Samples.Tractor</a>.</p>',6)]))}const f=r(l,[["render",p]]);export{d as __pageData,f as default};
